#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include"btree.h"


int main()
{
  BTA *root, node;
  FILE *fp;
  int size, n, n1, i;
  char *inp, *opt, *meaning, *word, *tmpmeaning;
  word = (char*)calloc(81, sizeof(char));
  tmpmeaning = (char*)calloc(240, sizeof(char));
  opt = (char*)calloc(31, sizeof(char));
  inp = (char*)calloc(255, sizeof(char));
  if ((root = btopn("index.dat", 0, 0)) == NULL)
    {
      root = btcrt("index.dat", 0, 0);
    };
  if ((fp = fopen("index.txt", "r")) == NULL)
    {
      fp = fopen("index.txt", "w+");
    };
  fscanf(fp, "@%[^/]%s", word, tmpmeaning);
  fgets(inp, 2, fp);
  *(word + strlen(word) - 1) = '\0';
  meaning = (char*)realloc(tmpmeaning, strlen(tmpmeaning)*sizeof(char));
  while (!feof(fp))
    {
      *inp = '\0';
      //printf("prev_meaning : %s\n", tmpmeaning);
      fgets(inp, 255, fp);
      //printf("prev_meaning : %s\ncurr_inp : %s", tmpmeaning, inp);
      if (*inp == '\n')
	{
	  i = 1;
	  printf("word : %s\n", word);
	  btins(root, strdup(word), strdup(meaning), strlen(meaning)*sizeof(char));
	  word = (char*)calloc(81, sizeof(char));
	  tmpmeaning = (char*)calloc(240, sizeof(char));
	  inp = (char*)calloc(255, sizeof(char));
	  fscanf(fp, "@%[^/]%s", word, tmpmeaning);
	  //printf("vong 1 : tmpmeaning : %s.\n", tmpmeaning);
	  fgets(inp, 2, fp);
	  *(word + strlen(word) - 1) = '\0';
	  meaning = strdup(tmpmeaning);
	  n = strlen(meaning);
	  *(meaning + n + 1) = '\0';
	  *(meaning + n) = '\n';
	  //printf("vong 1 : meaning : %s.\n", meaning);
	}
      else
	{
	  i++;
	  tmpmeaning = strdup(inp);
	  //printf("vong %d :\ninp : %s\n", i, inp);
	  if ((strlen(meaning) + strlen(tmpmeaning)) < 230)
	    {
	      meaning = (char*)realloc(meaning, 240*sizeof(char));
	      n = strlen(tmpmeaning) + strlen(meaning) + 1;
	      n1 = strlen(meaning);
	      //*(meaning + strlen(meaning)) = '\n';
	      for (int i = n1+1; i < n; i++)
		{
		  *(meaning + i) = *(tmpmeaning + i - n1);
		};
	    };
	};
    };
  btcls(root);
  fclose(fp);
  return 0;
}
